@use "sass:color";
@use "./colors.scss";
@use "../tokens.scss";

.bg-main {
  background-color: colors.$main;
  color: colors.$neutral-green;
  h2 {
    color: currentColor;
  }
}

button.bg-main:hover {
  background-color: color.adjust(colors.$main, $lightness: -10%);
}
button.bg-main:active {
  background-color: color.adjust(colors.$main, $lightness: -15%);
  box-shadow: none;
  transform: translateY(1px);
}

.bg-accent {
  background-color: colors.$accent;
}

button.bg-accent:hover {
  background-color: color.adjust(
    colors.$accent,
    $lightness: -10%,
    $saturation: -5%
  );
}
button.bg-accent:active {
  background-color: color.adjust(
    colors.$accent,
    $lightness: -15%,
    $saturation: -15%
  );
  box-shadow: none;
  transform: translateY(1px);
}

.bg-text {
  background-color: colors.$text;
}

.bg-neutral-teal {
  background-color: colors.$neutral-teal;
}

.bg-neutral-green {
  background-color: colors.$neutral-green;
}

.color-text {
  color: colors.$text;
}

.color-neutral {
  color: colors.$neutral-green;
}

.color-main {
  color: colors.$main;
}

.color-accent {
  color: colors.$accent;
}

.bg-dots {
  position: relative;
  &::before {
    content: "";
    position: absolute;
    display: block;
    inset: 0;
    background: var(
      --background,
      linear-gradient(colors.$main, colors.$accent)
    );
    background: var(
      --background,
      linear-gradient(in oklch, colors.$main, colors.$accent)
    );
    mask: url("/dots.svg");
    mask-size: var(--density, 1rem);
    mask-repeat: round;
  }
}

.box {
  padding-inline: tokens.$space-6;
  padding-block: tokens.$space-8;
}

.page {
  width: 100%;
  min-height: 100dvh;
  overflow-x: clip;
}

.container {
  max-width: 64rem;
  margin-inline: auto;
  padding-inline: tokens.$space-6;
  padding-block: tokens.$space-8;
}

.hero-container {
  display: grid;
  grid-template-columns: var(--columns, 1fr 50%);
  max-width: 64rem;
  margin-inline: auto;
  min-height: 100dvh;
}

.flex-list {
  display: flex;
  padding: 0;
  list-style-type: none;
  gap: var(--list-gap, tokens.$space-6);
  flex-wrap: wrap;
  flex-direction: var(--direction, row);
}

.flex-container {
  display: flex;
  flex-direction: var(--direction, row);
  gap: var(--gap, tokens.$space-5);
}

.fluid {
  font-size: clamp(
    var(--fluid-typography-min),
    4vmin,
    var(--fluid-typography-max)
  );
}

.padding-box {
  border-radius: tokens.$space-4;
  padding: tokens.$space-5;
}

*:has(.gradient-border) {
  isolation: isolate;
}

.gradient-border {
  position: relative;
  margin: var(--border-width, 4px);
  &::before {
    content: "";
    display: block;
    position: absolute;
    inset: calc(-1 * var(--border-width, 4px));
    border-radius: calc(tokens.$space-5 - var(--border-width, 4px));
    z-index: -1;
    background: var(
      --background,
      linear-gradient(colors.$main, colors.$accent)
    );
    background: var(
      --background,
      linear-gradient(in oklch, colors.$main, colors.$accent)
    );
  }
}

.floating-image-wrapper {
  position: relative;
  .image {
    position: absolute;
    top: 0;
    right: 0;
    @include tokens.on-sm-screen {
      display: none;
    }
  }
}

.triple-column {
  display: grid;
  gap: tokens.$space-6;
  grid-template-columns: repeat(3, minmax(16rem, 1fr));
  @include tokens.on-md-screen {
    grid-template-columns: repeat(2, minmax(16rem, 1fr));
    > *:last-child {
      grid-column: span 2;
      max-width: 50%;
      margin: auto;
    }
  }
  @include tokens.on-sm-screen {
    grid-template-columns: 1fr;
    > *:last-child {
      grid-column: unset;
      max-width: unset;
    }
  }
}

.responsive-grid {
  display: grid;
  grid-template-columns: repeat(
    auto-fill,
    minmax(var(--col-width, 20rem), 1fr)
  );
  row-gap: tokens.$space-6;
}
